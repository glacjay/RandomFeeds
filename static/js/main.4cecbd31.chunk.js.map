{"version":3,"sources":["pages/FolderPage.js","pages/ItemPage.js","pages/LoginPage.js","pages/IndexPage.js","App.js","serviceWorker.js","index.js","utils/api2.js","RootStore.js"],"names":["observer","props","rootStore","useRootStore","folderId","qs","parse","location","search","slice","id","folder","folders","find","React","useEffect","loadItems","token","useState","isSubmitting","setIsSubmitting","className","randomItems","map","item","key","to","style","margin","border","padding","title","marginTop","justifyContent","fontSize","color","origin","author","dayjs","updated","format","height","position","bottom","left","right","zIndex","onClick","reloadItems","disabled","flex","a","markFolderAsRead","reloadRandomItems","itemId","contentElement","summary","content","preprocessingInstructions","shouldPreprocessNode","node","name","preprocessNode","attribs","processingInstructions","shouldProcessNode","processNode","HtmlToReact","ProcessNodeDefinitions","processDefaultNode","HtmlToReactParser","parseWithInstructions","href","canonical","target","rel","background","fontWeight","dangerouslySetInnerHTML","__html","markItemAsRead","history","goBack","account","password","state","setState","display","gridTemplateColumns","rowGap","columnGap","value","onChange","e","login","gridColumn","loadFolders","localStorage","getItem","loadToken","console","warn","toast","autoClose","closeButton","transition","cssTransition","enter","exit","duration","hideProgressBar","toastClassName","bodyClassName","basename","path","component","require","default","Boolean","window","hostname","match","ReactDOM","render","StrictMode","RootStore","Provider","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","api2","api","axios","create","baseURL","timeout","request","method","url","args","options","actualArgs","headers","Authorization","data","stringify","params","result","log","toUpperCase","get","post","mobx","this","Email","Passwd","json","split","filter","l","forEach","line","idx","indexOf","substr","Auth","Error","setItem","tags","tag","test","f","items","length","itemsStr","JSON","output","s","xt","r","n","itemRefs","randomItemsStr","indics","Array","from","Set","fill","parseInt","Math","random","join","i","removeItem","field","some","RootStoreContext","createContext","useContext"],"mappings":"uOAOeA,uBAAS,SAAmBC,GAAQ,IAAD,IAC1CC,EAAYC,cAGNC,EADEC,IAAGC,MAAML,EAAMM,SAASC,OAAOC,MAAM,IAC3CC,GACFC,EAAM,UAAGT,EAAUU,eAAb,aAAG,EAAmBC,MAAK,SAACF,GAAD,OAAYA,EAAOD,KAAON,KAEjEU,IAAMC,WAAU,WACdb,EAAUc,UAAU,CAAEZ,eACrB,CAACF,EAAWA,EAAUe,MAAOb,IATgB,MAWRU,IAAMI,UAAS,GAXP,mBAWzCC,EAXyC,KAW3BC,EAX2B,KAahD,OACE,yBAAKC,UAAU,eAAf,OACGV,QADH,IACGA,GADH,UACGA,EAAQW,mBADX,aACG,EAAqBC,KAAI,SAACC,GAAD,OACxB,kBAAC,IAAD,CACEC,IAAKD,EAAKd,GACVgB,GAAE,mBAAcF,EAAKd,IACrBiB,MAAO,CAAEC,OAAQ,EAAGC,OAAQ,kBAAmBC,QAAS,KAExD,6BAAMN,EAAKO,OACX,yBACEV,UAAU,wBACVM,MAAO,CAAEK,UAAW,EAAGC,eAAgB,gBAAiBC,SAAU,GAAIC,MAAO,SAE7E,6BACGX,EAAKY,OAAOL,MADf,MACyBP,EAAKa,QAE9B,6BAAMC,IAAqB,IAAfd,EAAKe,SAAgBC,OAAO,0BAK9C,yBAAKb,MAAO,CAAEc,OAAQ,MACtB,yBACEpB,UAAU,WACVM,MAAO,CAAEe,SAAU,QAASC,OAAQ,EAAGC,KAAM,EAAGC,MAAO,EAAGC,OAAQ,EAAGL,OAAQ,KAE7E,4BACEM,QAAS,WACP3B,GAAgB,GAChBlB,EAAUc,UAAU,CAAEZ,WAAU4C,aAAa,IAC7C5B,GAAgB,IAElB6B,SAAU9B,EACVQ,MAAO,CAAEuB,KAAM,IAPjB,uBAWA,4BACEH,QAAO,sBAAE,sBAAAI,EAAA,sDACP/B,GAAgB,GAChBlB,EAAUkD,iBAAiBhD,GAC3BgB,GAAgB,GAHT,2CAKT6B,SAAU9B,EACVQ,MAAO,CAAEuB,KAAM,IAPjB,qBAWA,4BACEH,QAAS,WACP3B,GAAgB,GAChBlB,EAAUc,UAAU,CAAEZ,WAAUiD,mBAAmB,IACnDjC,GAAgB,IAElB6B,SAAU9B,EACVQ,MAAO,CAAEuB,KAAM,IAPjB,6B,oKC7DOlD,uBAAS,SAAkBC,GAAQ,IAAD,YACzCC,EAAYC,cAGNmD,EADEjD,IAAGC,MAAML,EAAMM,SAASC,OAAOC,MAAM,IAC3CC,GACFc,EAAI,UAAGtB,EAAUoB,mBAAb,aAAG,EAAuBT,MAAK,SAACW,GAAD,OAAUA,EAAKd,KAAO4C,KALhB,EAOPxC,IAAMI,UAAS,GAPR,mBAOxCC,EAPwC,KAO1BC,EAP0B,KAS3CmC,EAAiB,KACrB,UAAI/B,QAAJ,IAAIA,GAAJ,UAAIA,EAAMgC,eAAV,aAAI,EAAeC,QAAS,CAC1B,IAAMC,EAA4B,CAChC,CACEC,qBAAsB,SAACC,GAAD,MAAwB,QAAdA,EAAKC,MACrCC,eAAgB,SAACF,GAAU,IAAD,EACxBA,EAAKG,QAAL,eACKH,EAAKG,QADV,CAEEpC,MAAM,GAAD,iBAAKiC,EAAKG,eAAV,aAAK,EAAcpC,MAAnB,2BAMPqC,EAAyB,CAC7B,CACEC,kBAAmB,SAACL,GAAD,OAAU,GAC7BM,YAJ2B,IAAIC,IAAYC,uBAAuBtD,KAI9BuD,qBAIxCd,GADe,IAAIe,UACKC,sBACtB/C,EAAKgC,QAAQC,SACb,kBAAM,IACNO,EACAN,GAIJ,OACE,yBAAKrC,UAAU,eACb,uBACEmD,KAAI,OAAEhD,QAAF,IAAEA,GAAF,UAAEA,EAAMiD,iBAAR,iBAAE,EAAkB,UAApB,aAAE,EAAsBD,KAC5BE,OAAO,SACPC,IAAI,sBACJtD,UAAU,cACVM,MAAO,CACLiD,WAAY,YACZ9C,QAAS,IAGX,yBAAKH,MAAO,CAAEkD,WAAY,SAA1B,OAAqCrD,QAArC,IAAqCA,OAArC,EAAqCA,EAAMO,OAC3C,yBACEV,UAAU,wBACVM,MAAO,CAAEK,UAAW,EAAGC,eAAgB,gBAAiBC,SAAU,GAAIC,MAAO,SAE7E,oCACGX,QADH,IACGA,GADH,UACGA,EAAMY,cADT,aACG,EAAcL,MADjB,aAC2BP,QAD3B,IAC2BA,OAD3B,EAC2BA,EAAMa,QAEjC,6BAAMC,IAAsB,KAAZ,OAAJd,QAAI,IAAJA,OAAA,EAAAA,EAAMe,UAAgBC,OAAO,uBAI7C,yBAAKb,MAAO,CAAEC,OAAQ,IACnB2B,GAAkB,yBAAKuB,wBAAyB,CAAEC,OAAM,OAAEvD,QAAF,IAAEA,GAAF,UAAEA,EAAMgC,eAAR,aAAE,EAAeC,YAG5E,yBAAK9B,MAAO,CAAEc,OAAQ,MACtB,yBACEpB,UAAU,WACVM,MAAO,CAAEe,SAAU,QAASC,OAAQ,EAAGC,KAAM,EAAGC,MAAO,EAAGC,OAAQ,EAAGL,OAAQ,KAE7E,4BACEM,QAAO,sBAAE,sBAAAI,EAAA,6DACP/B,GAAgB,GADT,SAEGlB,EAAU8E,eAAV,OAAyBxD,QAAzB,IAAyBA,OAAzB,EAAyBA,EAAMd,IAFlC,kCAGLT,EAAMgF,QAAQC,SAHT,OAKP9D,GAAgB,GALT,2CAOT6B,SAAU9B,EACVQ,MAAO,CAAEuB,KAAM,IATjB,gBAaA,4BAAQH,QAAS,kBAAM9C,EAAMgF,QAAQC,UAAUjC,SAAU9B,EAAcQ,MAAO,CAAEuB,KAAM,IAAtF,gB,iHCvFOlD,uBAAS,SAAmBC,GAAQ,IAAD,IAC1CC,EAAYC,cAD8B,EAGtBW,IAAMI,SAAS,CACvCiE,QAAS,KACTC,SAAU,KACVjE,cAAc,IANgC,mBAGzCkE,EAHyC,KAGlCC,EAHkC,KAShD,OACE,yBACE3D,MAAO,CACLC,OAAQ,GACR2D,QAAS,OACTC,oBAAqB,WACrBC,OAAQ,GACRC,UAAW,KAGb,wCACA,2BACEC,MAAK,UAAEN,EAAMF,eAAR,QAAmB,GACxBS,SAAU,SAACC,GAAD,OAAOP,EAAS,eAAKD,EAAN,CAAaF,QAASU,EAAEnB,OAAOiB,OAAS,WAGnE,yCACA,2BACEA,MAAK,UAAEN,EAAMD,gBAAR,QAAoB,GACzBQ,SAAU,SAACC,GAAD,OAAOP,EAAS,eAAKD,EAAN,CAAaD,SAAUS,EAAEnB,OAAOiB,OAAS,WAGpE,4BACE5C,QAAO,sBAAE,sBAAAI,EAAA,6DACPmC,EAAS,eAAKD,EAAN,CAAalE,cAAc,KAD5B,SAEGjB,EAAU4F,MAAMT,EAAMF,QAASE,EAAMD,UAFxC,kCAGLnF,EAAMgF,QAAQC,SAHT,OAKPI,EAAS,eAAKD,EAAN,CAAalE,cAAc,KAL5B,2CAOT8B,SAAUoC,EAAMlE,aAChBQ,MAAO,CAAEoE,WAAY,aAAcjE,QAAS,EAAGI,SAAU,KAT3D,c,iCCnCN,kDAKelC,uBAAS,SAAmBC,GAAQ,IAAD,EAC1CC,EAAYC,cAMlB,OAJAW,IAAMC,WAAU,WACdb,EAAU8F,gBACT,CAAC9F,EAAWA,EAAUe,QAEpBf,EAAUe,MASb,yBAAKI,UAAU,eAAf,UACGnB,EAAUU,eADb,aACG,EAAmBW,KAAI,SAACZ,GAAD,OACtB,kBAAC,IAAD,CACEc,IAAKd,EAAOD,GACZgB,GAAE,qBAAgBf,EAAOD,IACzBiB,MAAO,CAAEC,OAAQ,EAAGC,OAAQ,kBAAmBC,QAAS,KAEvDnB,EAAOD,QAdZ,kBAAC,IAAD,CAAMgB,GAAG,SAASC,MAAO,CAAEC,OAAQ,EAAGC,OAAQ,kBAAmBC,QAAS,KAA1E,a,gKCNS9B,G,OAAAA,aAAS,WACtB,IAAME,EAAYC,cAelB,OAbAW,IAAMC,WAAU,YACC,uCAAG,4BAAAoC,EAAA,+EAEM8C,aAAaC,QAAQ,SAF3B,OAERjF,EAFQ,OAGdf,EAAUiG,UAAUlF,GAHN,gDAKdmF,QAAQC,KAAK,uBAAb,MACAC,YAAM,uBAAD,cANS,yDAAH,qDASfH,KACC,CAACjG,IAGF,6BACE,kBAAC,IAAD,CACEqG,UAAW,IACXC,aAAa,EACbC,WAAYC,YAAc,CACxBC,MAAO,cACPC,KAAM,aACNC,SAAU,MAEZC,iBAAe,EACfC,eAAe,eACfC,cAAc,eAGhB,kBAAC,IAAD,CAAeC,SAAS,iBACtB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,UAAUC,UAAWC,EAAQ,KAAwBC,UACjE,kBAAC,IAAD,CAAOH,KAAK,QAAQC,UAAWC,EAAQ,KAAsBC,UAE7D,kBAAC,IAAD,CAAOH,KAAK,SAASC,UAAWC,EAAQ,KAAuBC,UAC/D,kBAAC,IAAD,CAAOH,KAAK,IAAIC,UAAWC,EAAQ,KAAuBC,iB,OCjChDC,QACW,cAA7BC,OAAOhH,SAASiH,UAEe,UAA7BD,OAAOhH,SAASiH,UAEhBD,OAAOhH,SAASiH,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACC,EAAA,EAAiBC,SAAlB,CAA2BnC,MAAO,IAAIkC,KACpC,kBAAC,EAAD,QAGJE,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpC,QAAQoC,MAAMA,EAAMC,a,gQEtItBC,EAAO,GAETC,EAAMC,IAAMC,OAAO,CACrBC,QAAS,6BACTC,QAAS,MAGXL,EAAKM,QAAL,+BAAA7F,EAAA,MAAe,WAAO8F,EAAQC,EAAKC,EAAMC,GAA1B,mBAAAjG,EAAA,sEAELkG,EAFK,eAGNF,GAECG,EALK,eAMLZ,EAAKzH,MAAQ,CAAEsI,cAAc,oBAAD,OAAsBb,EAAKzH,QAAY,IAN9D,SASH0H,EAAIK,QAAJ,aACJC,SACAC,OACe,SAAXD,EAAoB,CAAEO,KAAMnJ,IAAGoJ,UAAUJ,IAAgB,CAAEK,OAAQL,GAHnE,CAIJC,aAbO,cAQLK,EARK,OAeTH,MACmB,KAAV,OAAPJ,QAAO,IAAPA,OAAA,EAAAA,EAASQ,MACXxD,QAAQwD,IAAIX,EAAOY,cAAeX,EAAKC,EAAMQ,GAjBpC,kBAmBJA,GAnBI,wCAqBXvD,QAAQC,KAAK4C,EAAOY,cAAeX,EAAKC,EAAxC,MArBW,+DAAf,4DA0BAT,EAAKoB,IAAL,+BAAA3G,EAAA,MAAW,WAAO+F,EAAKC,EAAMC,GAAlB,SAAAjG,EAAA,+EACFuF,EAAKM,QAAQ,MAAOE,EAAKC,EAAMC,IAD7B,2CAAX,0DAGAV,EAAKqB,KAAL,+BAAA5G,EAAA,MAAY,WAAO+F,EAAKC,EAAMC,GAAlB,SAAAjG,EAAA,+EACHuF,EAAKM,QAAQ,OAAQE,EAAKC,EAAMC,IAD7B,2CAAZ,0DAIeV,QCtCMb,E,WAMnB,aAAe,yBALf5G,MAAQ,KAKM,KAHdL,QAAU,KAGI,KAFdU,YAAc,KAGZ0I,IAAwBC,M,sDAGhBhJ,GACRgJ,KAAKhJ,MAAQA,EACbyH,EAAKzH,MAAQA,I,wCAGRkE,EAASC,G,yEAEG,O,kBAAMsD,EAAKqB,KAAK,wBAAyB,CAAEG,MAAO/E,EAASgF,OAAQ/E,I,UAA5EuE,E,OACAS,EAAO,GACbT,EACGU,MAAM,MACNC,QAAO,SAACC,GAAD,OAAOA,KACdC,SAAQ,SAACC,GACR,IAAMC,EAAMD,EAAKE,QAAQ,KACrBD,EAAM,EACRN,EAAKK,EAAKG,OAAO,EAAGF,IAAQD,EAAKG,OAAOF,EAAM,GAE9CN,EAAKK,IAAQ,KAGdL,EAAKS,K,sBACF,IAAIC,MAAM,iC,OAIlB,OADAb,KAAKhJ,MAAQmJ,EAAKS,K,UACZ5E,aAAa8E,QAAQ,QAASd,KAAKhJ,O,eACzCyH,EAAKzH,MAAQgJ,KAAKhJ,M,mBACX,G,yCAEPmF,QAAQC,KAAK,yBAAb,MACAC,YAAM,iBAAD,c,mBACE,G,6LAMF2D,KAAKhJ,M,iDAIK,O,SAAMyH,EAAKoB,IAAI,sC,OAAxBH,E,OACNM,KAAKrJ,QAAU+I,EAAOqB,KAAKV,QAAO,SAACW,GAAD,MAAS,YAAYC,KAAKD,EAAIvK,O,gDAEhE0F,QAAQC,KAAK,+BAAb,MACAC,YAAM,uBAAD,c,4MAIIlG,E,EAAAA,SAAU4C,E,EAAAA,YAAaK,E,EAAAA,kB,SAE3B4G,KAAKhJ,OAAUb,E,oDAGf6J,KAAKrJ,Q,gBACR,O,SAAMqJ,KAAKjE,c,UAEPrF,E,UAASsJ,KAAKrJ,e,aAAL,EAAcC,MAAK,SAACsK,GAAD,OAAOA,EAAEzK,KAAON,K,sDAK9C4C,IACFrC,EAAOyK,MAAQ,OAEbpI,GAAeK,KACjB1C,EAAOW,YAAc,MAGjB8J,EAAUzK,EAAVyK,OACK,QAAL,EAAAA,SAAA,eAAOC,QAAS,GAAOrI,E,iBACV,O,UAAMiD,aAAaC,QAAQ,SAAW9F,G,SAAjDkL,E,UAEJF,EAAQG,KAAKjL,MAAMgL,GACnB3K,EAAOyK,MAAQA,G,YAGR,QAAL,EAAAA,SAAA,eAAOC,QAAS,IAAMrI,E,iBACjB,O,UAAM0F,EAAKoB,IAAI,iCAAkC,CACxD0B,OAAQ,OACRC,EAAGrL,EACHsL,GAAI,+BACJC,EAAG,IACHC,EAAG,M,QAGL,OARAR,E,OAMIS,SACJlL,EAAOyK,MAAQA,E,UACTnF,aAAa8E,QAAQ,SAAW3K,EAAUmL,KAAK9B,UAAU2B,I,WAG3D9J,EAAgBX,EAAhBW,aACW,QAAX,EAAAA,SAAA,eAAa+J,QAAS,GAAOhI,E,iBACV,O,UAAM4C,aAAaC,QAAQ,eAAiB9F,G,SAA7D0L,E,UAEJxK,EAAciK,KAAKjL,MAAMwL,GACzBnL,EAAOW,YAAcA,G,YAGR,QAAX,EAAAA,SAAA,eAAa+J,QAAS,IAAMrI,IAAeK,E,iBAQhC,OAPT0I,EAASC,MAAMC,KACnB,IAAIC,IACFF,MAAM,GACHG,OACA5K,KAAI,kBAAM6K,SAASC,KAAKC,SAAWlB,EAAMC,a,UAG3B3C,EAAKoB,IAAL,yDAC+BiC,EAC/CxK,KAAI,SAACmJ,GAAD,mBAAeU,EAAMV,GAAKhK,OAC9B6L,KAAK,M,QAGV,OANAjL,E,OAIG8J,MAAM7J,KAAI,SAACC,EAAMkJ,GAAP,sBAAqBlJ,EAArB,CAA2Bd,GAAI0K,EAAMV,GAAKhK,QACvDC,EAAOW,YAAcA,E,UACf2E,aAAa8E,QAAQ,eAAiB3K,EAAUmL,KAAK9B,UAAUnI,I,QAEvE2I,KAAK3I,YAAcA,E,kDAEnB8E,QAAQC,KAAK,6BAAb,MACAC,YAAM,qBAAD,c,2GAIOhD,G,mFAEP2G,KAAKhJ,OAAUqC,E,0CACX,G,OAGT,O,SAAMoF,EAAKqB,KAAK,yBAA0B,CAAEyC,EAAGlJ,EAAQH,EAAG,iC,OAE1D,O,SAAM8G,KAAKwC,WAAWnJ,EAAQ,S,OAC9B,O,SAAM2G,KAAKwC,WAAWnJ,EAAQ,e,cAE9B2G,KAAK3I,YAAL,UAAmB2I,KAAK3I,mBAAxB,aAAmB,EAAkBgJ,QAAO,SAAC9I,GAAD,OAAUA,EAAKd,KAAO4C,K,mBAC3D,G,yCAEP8C,QAAQC,KAAK,kCAAb,MACAC,YAAM,4BAAD,c,mBACE,G,uGAIChD,EAAQoJ,G,2FACGzC,KAAKrJ,SAAW,I,4DAA1BD,E,oBACLA,EAAO+L,U,aAAP,EAAeC,MAAK,SAACnL,GAAD,OAAUA,EAAKd,KAAO4C,M,gBAE5C,OADA3C,EAAO+L,GAAS/L,EAAO+L,GAAOpC,QAAO,SAAC9I,GAAD,OAAUA,EAAKd,KAAO4C,K,SACrD2C,aAAa8E,QAAb,UAAwB2B,EAAxB,YAAiC/L,EAAOD,IAAM6K,KAAK9B,UAAU9I,EAAO+L,K,yPAK9DtM,G,kFACVO,EAASsJ,KAAKrJ,QAAQC,MAAK,SAACsK,GAAD,OAAOA,EAAEzK,KAAON,M,+BAE5BO,EAAOW,aAAe,I,yDACvC,OADSE,E,iBACHyI,KAAKjF,eAAexD,EAAKd,I,8IAEjC,O,UAAMuJ,KAAKjJ,UAAU,CAAEZ,a,uEAKhBwM,EAAmB9L,IAAM+L,cAAc,MAE7C,SAAS1M,IACd,OAAOW,IAAMgM,WAAWF,K","file":"static/js/main.4cecbd31.chunk.js","sourcesContent":["import dayjs from 'dayjs';\nimport { observer } from 'mobx-react';\nimport qs from 'qs';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { useRootStore } from 'src/RootStore';\n\nexport default observer(function GroupPage(props) {\n  const rootStore = useRootStore();\n\n  const query = qs.parse(props.location.search.slice(1));\n  const { id: folderId } = query;\n  const folder = rootStore.folders?.find((folder) => folder.id === folderId);\n\n  React.useEffect(() => {\n    rootStore.loadItems({ folderId });\n  }, [rootStore, rootStore.token, folderId]);\n\n  const [isSubmitting, setIsSubmitting] = React.useState(false);\n\n  return (\n    <div className=\"flex-column\">\n      {folder?.randomItems?.map((item) => (\n        <Link\n          key={item.id}\n          to={`/Item?id=${item.id}`}\n          style={{ margin: 8, border: '1px solid black', padding: 16 }}\n        >\n          <div>{item.title}</div>\n          <div\n            className=\"flex-row align-center\"\n            style={{ marginTop: 8, justifyContent: 'space-between', fontSize: 12, color: 'gray' }}\n          >\n            <div>\n              {item.origin.title} | {item.author}\n            </div>\n            <div>{dayjs(item.updated * 1000).format('YYYY-MM-DD HH:mm')}</div>\n          </div>\n        </Link>\n      ))}\n\n      <div style={{ height: 50 }} />\n      <div\n        className=\"flex-row\"\n        style={{ position: 'fixed', bottom: 0, left: 0, right: 0, zIndex: 7, height: 50 }}\n      >\n        <button\n          onClick={() => {\n            setIsSubmitting(true);\n            rootStore.loadItems({ folderId, reloadItems: true });\n            setIsSubmitting(false);\n          }}\n          disabled={isSubmitting}\n          style={{ flex: 1 }}\n        >\n          reload folder items\n        </button>\n        <button\n          onClick={async () => {\n            setIsSubmitting(true);\n            rootStore.markFolderAsRead(folderId);\n            setIsSubmitting(false);\n          }}\n          disabled={isSubmitting}\n          style={{ flex: 1 }}\n        >\n          mark them as read\n        </button>\n        <button\n          onClick={() => {\n            setIsSubmitting(true);\n            rootStore.loadItems({ folderId, reloadRandomItems: true });\n            setIsSubmitting(false);\n          }}\n          disabled={isSubmitting}\n          style={{ flex: 1 }}\n        >\n          reload random items\n        </button>\n      </div>\n    </div>\n  );\n});\n","import dayjs from 'dayjs';\nimport HtmlToReact, { Parser as HtmlToReactParser } from 'html-to-react';\nimport { observer } from 'mobx-react';\nimport qs from 'qs';\nimport React from 'react';\nimport { useRootStore } from 'src/RootStore';\n\nexport default observer(function ItemPage(props) {\n  const rootStore = useRootStore();\n\n  const query = qs.parse(props.location.search.slice(1));\n  const { id: itemId } = query;\n  const item = rootStore.randomItems?.find((item) => item.id === itemId);\n\n  const [isSubmitting, setIsSubmitting] = React.useState(false);\n\n  let contentElement = null;\n  if (item?.summary?.content) {\n    const preprocessingInstructions = [\n      {\n        shouldPreprocessNode: (node) => node.name === 'img',\n        preprocessNode: (node) => {\n          node.attribs = {\n            ...node.attribs,\n            style: `${node.attribs?.style}; max-width: 100%;`,\n          };\n        },\n      },\n    ];\n    const processNodeDefinitions = new HtmlToReact.ProcessNodeDefinitions(React);\n    const processingInstructions = [\n      {\n        shouldProcessNode: (node) => true,\n        processNode: processNodeDefinitions.processDefaultNode,\n      },\n    ];\n    const parser = new HtmlToReactParser();\n    contentElement = parser.parseWithInstructions(\n      item.summary.content,\n      () => true,\n      processingInstructions,\n      preprocessingInstructions,\n    );\n  }\n\n  return (\n    <div className=\"flex-column\">\n      <a\n        href={item?.canonical?.[0]?.href}\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        className=\"flex-column\"\n        style={{\n          background: 'lightgray',\n          padding: 8,\n        }}\n      >\n        <div style={{ fontWeight: 'bold' }}>{item?.title}</div>\n        <div\n          className=\"flex-row align-center\"\n          style={{ marginTop: 8, justifyContent: 'space-between', fontSize: 12, color: 'gray' }}\n        >\n          <div>\n            {item?.origin?.title} | {item?.author}\n          </div>\n          <div>{dayjs(item?.updated * 1000).format('YYYY-MM-DD HH:mm')}</div>\n        </div>\n      </a>\n\n      <div style={{ margin: 8 }}>\n        {contentElement || <div dangerouslySetInnerHTML={{ __html: item?.summary?.content }} />}\n      </div>\n\n      <div style={{ height: 50 }} />\n      <div\n        className=\"flex-row\"\n        style={{ position: 'fixed', bottom: 0, left: 0, right: 0, zIndex: 7, height: 50 }}\n      >\n        <button\n          onClick={async () => {\n            setIsSubmitting(true);\n            if (await rootStore.markItemAsRead(item?.id)) {\n              props.history.goBack();\n            }\n            setIsSubmitting(false);\n          }}\n          disabled={isSubmitting}\n          style={{ flex: 1 }}\n        >\n          mark as read\n        </button>\n        <button onClick={() => props.history.goBack()} disabled={isSubmitting} style={{ flex: 1 }}>\n          return\n        </button>\n      </div>\n    </div>\n  );\n});\n","import { observer } from 'mobx-react';\nimport React from 'react';\nimport { useRootStore } from 'src/RootStore';\n\nexport default observer(function LoginPage(props) {\n  const rootStore = useRootStore();\n\n  const [state, setState] = React.useState({\n    account: null,\n    password: null,\n    isSubmitting: false,\n  });\n\n  return (\n    <div\n      style={{\n        margin: 16,\n        display: 'grid',\n        gridTemplateColumns: 'auto 1fr',\n        rowGap: 16,\n        columnGap: 16,\n      }}\n    >\n      <div>account</div>\n      <input\n        value={state.account ?? ''}\n        onChange={(e) => setState({ ...state, account: e.target.value || null })}\n      />\n\n      <div>password</div>\n      <input\n        value={state.password ?? ''}\n        onChange={(e) => setState({ ...state, password: e.target.value || null })}\n      />\n\n      <button\n        onClick={async () => {\n          setState({ ...state, isSubmitting: true });\n          if (await rootStore.login(state.account, state.password)) {\n            props.history.goBack();\n          }\n          setState({ ...state, isSubmitting: false });\n        }}\n        disabled={state.isSubmitting}\n        style={{ gridColumn: '1 / span 2', padding: 8, fontSize: 14 }}\n      >\n        login\n      </button>\n    </div>\n  );\n});\n","import { observer } from 'mobx-react';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { useRootStore } from 'src/RootStore';\n\nexport default observer(function IndexPage(props) {\n  const rootStore = useRootStore();\n\n  React.useEffect(() => {\n    rootStore.loadFolders();\n  }, [rootStore, rootStore.token]);\n\n  if (!rootStore.token) {\n    return (\n      <Link to=\"/Login\" style={{ margin: 8, border: '1px solid black', padding: 16 }}>\n        login\n      </Link>\n    );\n  }\n\n  return (\n    <div className=\"flex-column\">\n      {rootStore.folders?.map((folder) => (\n        <Link\n          key={folder.id}\n          to={`/Folder?id=${folder.id}`}\n          style={{ margin: 8, border: '1px solid black', padding: 16 }}\n        >\n          {folder.id}\n        </Link>\n      ))}\n    </div>\n  );\n});\n","import { observer } from 'mobx-react';\nimport React from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport { cssTransition, ToastContainer } from 'react-toastify';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.min.css';\nimport { useRootStore } from 'src/RootStore';\n\nexport default observer(function App() {\n  const rootStore = useRootStore();\n\n  React.useEffect(() => {\n    const loadToken = async () => {\n      try {\n        const token = await localStorage.getItem('token');\n        rootStore.loadToken(token);\n      } catch (ex) {\n        console.warn('App.loadToken error:', ex);\n        toast(`load storage error: ${ex}`);\n      }\n    };\n    loadToken();\n  }, [rootStore]);\n\n  return (\n    <div>\n      <ToastContainer\n        autoClose={4000}\n        closeButton={false}\n        transition={cssTransition({\n          enter: 'slideInDown',\n          exit: 'slideOutUp',\n          duration: 300,\n        })}\n        hideProgressBar\n        toastClassName=\"toast-border\"\n        bodyClassName=\"toast-body\"\n      />\n\n      <BrowserRouter basename=\"/random-feeds\">\n        <Switch>\n          <Route path=\"/Folder\" component={require('src/pages/FolderPage').default} />\n          <Route path=\"/Item\" component={require('src/pages/ItemPage').default} />\n\n          <Route path=\"/Login\" component={require('src/pages/LoginPage').default} />\n          <Route path=\"/\" component={require('src/pages/IndexPage').default} />\n        </Switch>\n      </BrowserRouter>\n    </div>\n  );\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport RootStore, { RootStoreContext } from 'src/RootStore';\nimport App from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <RootStoreContext.Provider value={new RootStore()}>\n      <App />\n    </RootStoreContext.Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import axios from 'axios';\nimport qs from 'qs';\n\nconst api2 = {};\n\nlet api = axios.create({\n  baseURL: 'https://fever.glacjay.info',\n  timeout: 30000,\n});\n\napi2.request = async (method, url, args, options) => {\n  try {\n    const actualArgs = {\n      ...args,\n    };\n    const headers = {\n      ...(api2.token ? { Authorization: `GoogleLogin auth=${api2.token}` } : {}),\n    };\n    const result = (\n      await api.request({\n        method,\n        url,\n        ...(method === 'post' ? { data: qs.stringify(actualArgs) } : { params: actualArgs }),\n        headers,\n      })\n    ).data;\n    if (options?.log !== false) {\n      console.log(method.toUpperCase(), url, args, result);\n    }\n    return result;\n  } catch (error) {\n    console.warn(method.toUpperCase(), url, args, error);\n    throw error;\n  }\n};\n\napi2.get = async (url, args, options) => {\n  return api2.request('get', url, args, options);\n};\napi2.post = async (url, args, options) => {\n  return api2.request('post', url, args, options);\n};\n\nexport default api2;\n","import * as mobx from 'mobx';\nimport React from 'react';\nimport { toast } from 'react-toastify';\nimport api2 from 'src/utils/api2';\n\nexport default class RootStore {\n  token = null;\n\n  folders = null;\n  randomItems = null;\n\n  constructor() {\n    mobx.makeAutoObservable(this);\n  }\n\n  loadToken(token) {\n    this.token = token;\n    api2.token = token;\n  }\n\n  *login(account, password) {\n    try {\n      const result = yield api2.post('/accounts/ClientLogin', { Email: account, Passwd: password });\n      const json = {};\n      result\n        .split('\\n')\n        .filter((l) => l)\n        .forEach((line) => {\n          const idx = line.indexOf('=');\n          if (idx > 0) {\n            json[line.substr(0, idx)] = line.substr(idx + 1);\n          } else {\n            json[line] = true;\n          }\n        });\n      if (!json.Auth) {\n        throw new Error('account or password incorrect');\n      }\n\n      this.token = json.Auth;\n      yield localStorage.setItem('token', this.token);\n      api2.token = this.token;\n      return true;\n    } catch (ex) {\n      console.warn('RootStore.login error:', ex);\n      toast(`login failed: ${ex}`);\n      return false;\n    }\n  }\n\n  *loadFolders() {\n    try {\n      if (!this.token) {\n        return;\n      }\n\n      const result = yield api2.get('/reader/api/0/tag/list?output=json');\n      this.folders = result.tags.filter((tag) => /\\/label\\//.test(tag.id));\n    } catch (ex) {\n      console.warn('RootStore.loadFolders error:', ex);\n      toast(`load folders error: ${ex}`);\n    }\n  }\n\n  *loadItems({ folderId, reloadItems, reloadRandomItems }) {\n    try {\n      if (!this.token || !folderId) {\n        return;\n      }\n      if (!this.folders) {\n        yield this.loadFolders();\n      }\n      const folder = this.folders?.find((f) => f.id === folderId);\n      if (!folder) {\n        return;\n      }\n\n      if (reloadItems) {\n        folder.items = null;\n      }\n      if (reloadItems || reloadRandomItems) {\n        folder.randomItems = null;\n      }\n\n      let { items } = folder;\n      if (!(items?.length > 0) && !reloadItems) {\n        const itemsStr = yield localStorage.getItem('items:' + folderId);\n        if (itemsStr) {\n          items = JSON.parse(itemsStr);\n          folder.items = items;\n        }\n      }\n      if (!(items?.length > 0) || reloadItems) {\n        items = (yield api2.get('/reader/api/0/stream/items/ids', {\n          output: 'json',\n          s: folderId,\n          xt: 'user/-/state/com.google/read',\n          r: 'o',\n          n: 10000,\n        })).itemRefs;\n        folder.items = items;\n        yield localStorage.setItem('items:' + folderId, JSON.stringify(items));\n      }\n\n      let { randomItems } = folder;\n      if (!(randomItems?.length > 0) && !reloadRandomItems) {\n        const randomItemsStr = yield localStorage.getItem('randomItems:' + folderId);\n        if (randomItemsStr) {\n          randomItems = JSON.parse(randomItemsStr);\n          folder.randomItems = randomItems;\n        }\n      }\n      if (!(randomItems?.length > 0) || reloadItems || reloadRandomItems) {\n        const indics = Array.from(\n          new Set(\n            Array(7)\n              .fill()\n              .map(() => parseInt(Math.random() * items.length)),\n          ),\n        );\n        randomItems = (yield api2.get(\n          `/reader/api/0/stream/items/contents?output=json${indics\n            .map((idx) => `&i=${items[idx].id}`)\n            .join('')}`,\n        )).items.map((item, idx) => ({ ...item, id: items[idx].id }));\n        folder.randomItems = randomItems;\n        yield localStorage.setItem('randomItems:' + folderId, JSON.stringify(randomItems));\n      }\n      this.randomItems = randomItems;\n    } catch (ex) {\n      console.warn('RootStore.loadItems error:', ex);\n      toast(`load items error: ${ex}`);\n    }\n  }\n\n  *markItemAsRead(itemId) {\n    try {\n      if (!this.token || !itemId) {\n        return false;\n      }\n\n      yield api2.post('/reader/api/0/edit-tag', { i: itemId, a: 'user/-/state/com.google/read' });\n\n      yield this.removeItem(itemId, 'items');\n      yield this.removeItem(itemId, 'randomItems');\n\n      this.randomItems = this.randomItems?.filter((item) => item.id !== itemId);\n      return true;\n    } catch (ex) {\n      console.warn('RootStore.markItemAsRead error:', ex);\n      toast(`mark item as read error: ${ex}`);\n      return false;\n    }\n  }\n\n  *removeItem(itemId, field) {\n    for (const folder of this.folders || []) {\n      if (folder[field]?.some((item) => item.id === itemId)) {\n        folder[field] = folder[field].filter((item) => item.id !== itemId);\n        yield localStorage.setItem(`${field}:${folder.id}`, JSON.stringify(folder[field]));\n      }\n    }\n  }\n\n  *markFolderAsRead(folderId) {\n    const folder = this.folders.find((f) => f.id === folderId);\n    if (folder) {\n      for (const item of folder.randomItems || []) {\n        yield this.markItemAsRead(item.id);\n      }\n      yield this.loadItems({ folderId });\n    }\n  }\n}\n\nexport const RootStoreContext = React.createContext(null);\n\nexport function useRootStore() {\n  return React.useContext(RootStoreContext);\n}\n"],"sourceRoot":""}