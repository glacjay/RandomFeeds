{"version":3,"sources":["utils/api2.js","pages/GroupPage.js","pages/ItemPage.js","pages/LoginPage.js","pages/IndexPage.js","utils/globalStore.js","App.js","serviceWorker.js","index.js"],"names":["api","axios","create","baseURL","timeout","headers","Accept","api2","request","a","method","url","args","options","actualArgs","qs","stringify","params","result","data","log","console","toUpperCase","auth","Error","warn","get","post","observer","props","token","useGlobalStore","persisted","groupId","match","state","useLocalObservable","items","React","useEffect","api_key","unreadItemIds","unread_item_ids","split","pickedItemIds","i","idx","parseInt","Math","random","length","push","splice","with_ids","join","pickedItems","mobx","toast","loadFeeds","className","map","item","key","id","to","style","margin","border","padding","title","marginTop","justifyContent","fontSize","color","author","dayjs","created_on_time","format","itemId","markAsRead","mark","as","history","goBack","href","target","rel","background","fontWeight","dangerouslySetInnerHTML","__html","html","maxWidth","position","bottom","left","right","zIndex","height","onClick","flex","globalStore","account","password","isSubmitting","login","md5","setToken","localStorage","setItem","display","gridTemplateColumns","rowGap","columnGap","value","onChange","e","disabled","gridColumn","groups","loadGroups","group","GlobalStore","isLoaded","this","GlobalStoreContext","createContext","useContext","getItem","persistedJson","JSON","parse","setPersisted","loadPersisted","autoClose","closeButton","transition","cssTransition","enter","exit","duration","hideProgressBar","toastClassName","bodyClassName","basename","path","component","require","default","Boolean","window","location","hostname","ReactDOM","render","StrictMode","Provider","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.33c1a362.chunk.js","sourcesContent":["import axios from 'axios';\nimport qs from 'qs';\n\nlet api = axios.create({\n  baseURL: 'https://fever.glacjay.info',\n  timeout: 30000,\n  headers: {\n    Accept: 'application/json; charset=UTF-8',\n  },\n});\n\nconst api2 = {};\n\napi2.request = async (method, url, args, options) => {\n  try {\n    const actualArgs = {\n      ...args,\n    };\n    const result = (\n      await api[method](url, method === 'post' ? qs.stringify(actualArgs) : { params: actualArgs })\n    ).data;\n    if (options?.log !== false) {\n      console.log(method.toUpperCase(), url, args, result);\n    }\n    if (!result?.auth) {\n      throw new Error('auth failed');\n    }\n    return result;\n  } catch (error) {\n    console.warn(method.toUpperCase(), url, args, error);\n    throw error;\n  }\n};\n\napi2.get = async (url, args, options) => {\n  return api2.request('get', url, args, options);\n};\napi2.post = async (url, args, options) => {\n  return api2.request('post', url, args, options);\n};\n\nexport default api2;\n","import dayjs from 'dayjs';\nimport * as mobx from 'mobx';\nimport { observer, useLocalObservable } from 'mobx-react';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport api2 from 'src/utils/api2';\nimport useGlobalStore from 'src/utils/globalStore';\n\nexport default observer(function GroupPage(props) {\n  const globalStore = useGlobalStore();\n  const { token } = globalStore.persisted;\n\n  const navprops = props.match.params || {};\n  const { groupId } = navprops;\n\n  const state = useLocalObservable(() => ({\n    items: [],\n  }));\n\n  React.useEffect(() => {\n    const loadFeeds = async () => {\n      try {\n        if (!token) {\n          return;\n        }\n\n        const result = await api2.post('?api&unread_item_ids', { api_key: token });\n        const unreadItemIds = result.unread_item_ids?.split(',');\n        const pickedItemIds = [];\n        for (let i = 0; i < 7; ++i) {\n          const idx = parseInt(Math.random() * unreadItemIds.length);\n          pickedItemIds.push(unreadItemIds[idx]);\n          unreadItemIds.splice(idx, 1);\n        }\n\n        const pickedItems = (\n          await api2.post('?api&items', { api_key: token, with_ids: pickedItemIds.join(',') })\n        ).items;\n        mobx.runInAction(() => {\n          state.items = pickedItems;\n        });\n      } catch (ex) {\n        console.warn('GroupPage.loadFeeds error:', ex);\n        toast(`failed to load feeds: ${ex}`);\n      }\n    };\n    loadFeeds();\n  }, [token, groupId, state]);\n\n  return (\n    <div className=\"flex-column\">\n      {state.items?.map((item) => (\n        <Link\n          key={item.id}\n          to={`/Item/${item.id}`}\n          style={{ margin: 8, border: '1px solid black', padding: 16 }}\n        >\n          <div>{item.title}</div>\n          <div\n            className=\"flex-row align-center\"\n            style={{ marginTop: 8, justifyContent: 'space-between', fontSize: 12, color: 'gray' }}\n          >\n            <div>{item.author}</div>\n            <div>{dayjs(item.created_on_time * 1000).format('YYYY-MM-DD HH:mm')}</div>\n          </div>\n        </Link>\n      ))}\n    </div>\n  );\n});\n","import dayjs from 'dayjs';\nimport * as mobx from 'mobx';\nimport { observer, useLocalObservable } from 'mobx-react';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport api2 from 'src/utils/api2';\nimport useGlobalStore from 'src/utils/globalStore';\n\nexport default observer(function ItemPage(props) {\n  const globalStore = useGlobalStore();\n  const { token } = globalStore.persisted;\n\n  const navprops = props.match.params || {};\n  const { itemId } = navprops;\n\n  const state = useLocalObservable(() => ({\n    item: null,\n  }));\n\n  React.useEffect(() => {\n    const loadFeeds = async () => {\n      try {\n        if (!token) {\n          return;\n        }\n\n        const pickedItems = (await api2.post('?api&items', { api_key: token, with_ids: itemId }))\n          .items;\n        mobx.runInAction(() => {\n          state.item = pickedItems[0];\n        });\n      } catch (ex) {\n        console.warn('GroupPage.loadFeeds error:', ex);\n        toast(`failed to load feeds: ${ex}`);\n      }\n    };\n    loadFeeds();\n  }, [token, itemId, state]);\n\n  const markAsRead = async () => {\n    try {\n      await api2.post('?api', { api_key: token, mark: 'item', as: 'read', id: state.item?.id });\n      props.history.goBack();\n    } catch (ex) {\n      console.warn('ItemPage.markAsRead error:', ex);\n      toast(`mark item as read failed: ${ex}`);\n    }\n  };\n\n  return (\n    <div className=\"flex-column\">\n      <a\n        href={state.item?.url}\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        className=\"flex-column\"\n        style={{\n          background: 'lightgray',\n          padding: 8,\n        }}\n      >\n        <div style={{ fontWeight: 'bold' }}>{state.item?.title}</div>\n        <div\n          className=\"flex-row align-center\"\n          style={{ marginTop: 8, justifyContent: 'space-between', fontSize: 12, color: 'gray' }}\n        >\n          <div>{state.item?.author}</div>\n          <div>{dayjs(state.item?.created_on_time * 1000).format('YYYY-MM-DD HH:mm')}</div>\n        </div>\n      </a>\n\n      <div dangerouslySetInnerHTML={{ __html: state.item?.html }} style={{ maxWidth: '100vw' }} />\n\n      <div\n        className=\"flex-row\"\n        style={{ position: 'fixed', bottom: 0, left: 0, right: 0, zIndex: 7, height: 50 }}\n      >\n        <button onClick={markAsRead} style={{ flex: 1 }}>\n          mark as read\n        </button>\n        <button onClick={() => props.history.goBack()} style={{ flex: 1 }}>\n          return\n        </button>\n      </div>\n    </div>\n  );\n});\n","import md5 from 'md5';\nimport * as mobx from 'mobx';\nimport { observer, useLocalObservable } from 'mobx-react';\nimport React from 'react';\nimport { toast } from 'react-toastify';\nimport api2 from 'src/utils/api2';\nimport useGlobalStore from 'src/utils/globalStore';\n\nexport default observer(function LoginPage(props) {\n  const globalStore = useGlobalStore();\n\n  const state = useLocalObservable(() => ({\n    account: null,\n    password: null,\n    isSubmitting: false,\n\n    *login() {\n      try {\n        state.isSubmitting = true;\n        const token = md5(`${state.account}:${state.password}`);\n        const result = yield api2.post('?api', { api_key: token });\n        if (!result.auth) {\n          toast('auth failed');\n          return;\n        }\n        globalStore.setToken(token);\n        yield localStorage.setItem('token', token);\n        props.history.goBack();\n      } catch (ex) {\n      } finally {\n        state.isSubmitting = false;\n      }\n    },\n  }));\n\n  return (\n    <div\n      style={{\n        margin: 16,\n        display: 'grid',\n        gridTemplateColumns: 'auto 1fr',\n        rowGap: 16,\n        columnGap: 16,\n      }}\n    >\n      <div>account</div>\n      <input\n        value={state.account ?? ''}\n        onChange={mobx.action((e) => (state.account = e.target.value || null))}\n      />\n\n      <div>password</div>\n      <input\n        value={state.password ?? ''}\n        onChange={mobx.action((e) => (state.password = e.target.value || null))}\n      />\n\n      <button\n        onClick={state.login}\n        disabled={state.isSubmitting}\n        style={{ gridColumn: '1 / span 2', padding: 8, fontSize: 14 }}\n      >\n        login\n      </button>\n    </div>\n  );\n});\n","import * as mobx from 'mobx';\nimport { observer, useLocalObservable } from 'mobx-react';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport api2 from 'src/utils/api2';\nimport useGlobalStore from 'src/utils/globalStore';\n\nexport default observer(function IndexPage(props) {\n  const globalStore = useGlobalStore();\n  const { token } = globalStore.persisted;\n\n  const state = useLocalObservable(() => ({\n    groups: [],\n  }));\n\n  React.useEffect(() => {\n    const loadGroups = async () => {\n      try {\n        if (!token) {\n          return;\n        }\n        const result = await api2.post('?api&groups', { api_key: token });\n        mobx.runInAction(() => {\n          state.groups = result.groups;\n        });\n      } catch (ex) {\n        console.warn('IndexPage.loadGroups error:', ex);\n        toast(`failed to load groups: ${ex}`);\n      }\n    };\n    loadGroups();\n  }, [token, state]);\n\n  if (!token) {\n    return (\n      <Link to=\"/Login\" style={{ padding: 16 }}>\n        login\n      </Link>\n    );\n  }\n\n  return (\n    <div className=\"flex-column\">\n      {state.groups?.map((group) => (\n        <Link\n          key={group.id}\n          to={`/Group/${group.id}`}\n          style={{ margin: 8, border: '1px solid black', padding: 16 }}\n        >\n          {group.title}\n        </Link>\n      ))}\n    </div>\n  );\n});\n","import * as mobx from 'mobx';\nimport React from 'react';\n\nexport class GlobalStore {\n  persisted = {\n    isLoaded: false,\n    token: null,\n  };\n\n  constructor() {\n    mobx.makeAutoObservable(this);\n  }\n\n  setPersisted(persisted) {\n    this.persisted = persisted;\n  }\n\n  setToken(token) {\n    this.persisted.token = token;\n  }\n}\n\nexport const GlobalStoreContext = React.createContext(null);\n\nexport default function useGlobalStore() {\n  return React.useContext(GlobalStoreContext);\n}\n","import * as mobx from 'mobx';\nimport { observer } from 'mobx-react';\nimport React, { Fragment } from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport { cssTransition, ToastContainer } from 'react-toastify';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.min.css';\nimport useGlobalStore from 'src/utils/globalStore';\n\nconst PERSISTED_KEY = 'globalStore';\n\nexport default observer(function App() {\n  const globalStore = useGlobalStore();\n  const { token } = globalStore.persisted;\n\n  React.useEffect(() => {\n    const loadPersisted = async () => {\n      try {\n        let persisted = null;\n        const persistedJson = await localStorage.getItem(PERSISTED_KEY);\n        console.log('xxx load persisted', persistedJson);\n        if (persistedJson) {\n          persisted = JSON.parse(persistedJson);\n        }\n        globalStore.setPersisted({ ...persisted, isLoaded: true });\n\n        const token = await localStorage.getItem('token');\n        globalStore.setToken(token);\n      } catch (ex) {\n        console.warn('App.loadPersisted error:', ex);\n        toast(`加载离线存储出错：${ex}`);\n      }\n    };\n    loadPersisted();\n  }, [globalStore]);\n\n  React.useEffect(\n    () =>\n      mobx.reaction(\n        () => globalStore.persisted,\n        async (persisted) => {\n          console.log('xxx reaction', mobx.toJS(persisted));\n          if (persisted?.isLoaded) {\n            await localStorage.setItem(PERSISTED_KEY, JSON.stringify(persisted));\n          }\n        },\n      ),\n    [globalStore],\n  );\n\n  return (\n    <Fragment>\n      <ToastContainer\n        autoClose={4000}\n        closeButton={false}\n        transition={cssTransition({\n          enter: 'slideInDown',\n          exit: 'slideOutUp',\n          duration: 300,\n        })}\n        hideProgressBar\n        toastClassName=\"toast-border\"\n        bodyClassName=\"toast-body\"\n      />\n\n      <BrowserRouter basename=\"/random-feeds\">\n        <Switch>\n          <Route path=\"/Group/:groupId\" component={require('src/pages/GroupPage').default} />\n          <Route path=\"/Item/:itemId\" component={require('src/pages/ItemPage').default} />\n\n          <Route path=\"/Login\" component={require('src/pages/LoginPage').default} />\n          <Route path=\"/\" component={require('src/pages/IndexPage').default} />\n        </Switch>\n      </BrowserRouter>\n    </Fragment>\n  );\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GlobalStore, GlobalStoreContext } from 'src/utils/globalStore';\nimport App from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <GlobalStoreContext.Provider value={new GlobalStore()}>\n      <App />\n    </GlobalStoreContext.Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}